{"ast":null,"code":"// Struttura dati per luglio 2024\nconst julyData={year:2024,month:7,// Luglio\ndays:{1:19,2:16,3:26,4:15,5:7,6:0,7:0,8:20,9:22,10:25,11:16,12:21,13:0,14:0,15:14,16:18,17:18,18:22,19:12,20:0,21:0,22:18,23:13,24:17,25:23,26:21,27:0,28:0,29:29,30:28,31:22}};// Struttura dati per agosto 2024\nconst augustData={year:2024,month:8,// Agosto\ndays:{1:19,2:11,3:0,4:0,5:10,6:5,7:5,8:6,9:2,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:2,20:0,21:0,22:0,23:0,24:0,25:0,26:7,27:7,28:8,29:12,30:8,31:0}};// Array di tutti i mesi disponibili\nconst availableMonths=[julyData,augustData];// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts=data=>{return Object.values(data.days).reduce((total,shifts)=>total+shifts,0);};export const getMonthData=yearMonth=>{const[year,month]=yearMonth.split('-').map(Number);const monthData=availableMonths.find(m=>m.year===year&&m.month===month);if(monthData){return{totaleTurni:calculateTotalShifts(monthData),mediaGiornaliera:calculateAverageWorkdayShifts(monthData),massimoTurni:findMaxShiftsDay(monthData),minimoTurni:findMinShiftsDay(monthData)};}return null;};// Funzione per calcolare il numero di giorni lavorativi in un mese\nconst getWorkdaysInMonth=(year,month)=>{const date=new Date(year,month-1,1);let workdays=0;while(date.getMonth()===month-1){const dayOfWeek=date.getDay();if(dayOfWeek!==0&&dayOfWeek!==6)workdays++;date.setDate(date.getDate()+1);}return workdays;};// Funzione per calcolare la media giornaliera dei turni solo per i giorni lavorativi\nconst calculateAverageWorkdayShifts=data=>{const total=calculateTotalShifts(data);const workdays=getWorkdaysInMonth(data.year,data.month);return total/workdays;};// Funzione per ottenere la lista dei mesi disponibili\nexport const getAvailableMonths=()=>{return availableMonths.map(m=>({value:`${m.year}-${m.month.toString().padStart(2,'0')}`,label:`${getMonthName(m.month)} ${m.year}`,sortValue:m.year*12+m.month// Utilizziamo questo per ordinare\n})).sort((a,b)=>b.sortValue-a.sortValue)// Ordina dal più recente al meno recente\n.map(_ref=>{let{value,label}=_ref;return{value,label};});// Rimuove sortValue dall'output finale\n};// Funzione di utilità per ottenere il nome del mese\nconst getMonthName=monthNumber=>{const monthNames=['Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno','Luglio','Agosto','Settembre','Ottobre','Novembre','Dicembre'];return monthNames[monthNumber-1];};// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts=data=>{const total=calculateTotalShifts(data);const daysInMonth=Object.keys(data.days).length;return total/daysInMonth;};// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay=data=>{return Object.entries(data.days).reduce((max,_ref2)=>{let[day,shifts]=_ref2;return shifts>max.shifts?{day:parseInt(day),shifts}:max;},{day:0,shifts:0});};// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay=data=>{return Object.entries(data.days).reduce((min,_ref3)=>{let[day,shifts]=_ref3;if(shifts===0)return min;return shifts<min.shifts||min.shifts===0?{day:parseInt(day),shifts}:min;},{day:0,shifts:0});};// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth=()=>{return availableMonths.reduce((latest,current)=>{if(current.year>latest.year)return current;if(current.year===latest.year&&current.month>latest.month)return current;return latest;});};// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData=()=>{const lastMonth=getLastAvailableMonth();return{totaleTurni:calculateTotalShifts(lastMonth),mediaGiornaliera:calculateAverageWorkdayShifts(lastMonth),massimoTurni:findMaxShiftsDay(lastMonth),minimoTurni:findMinShiftsDay(lastMonth)};};// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData=()=>{const lastMonth=getLastAvailableMonth();const previousMonthIndex=availableMonths.findIndex(m=>m===lastMonth)-1;if(previousMonthIndex>=0){const previousMonth=availableMonths[previousMonthIndex];return{totaleTurni:calculateTotalShifts(previousMonth),mediaGiornaliera:calculateAverageShifts(previousMonth),massimoTurni:findMaxShiftsDay(previousMonth),minimoTurni:findMinShiftsDay(previousMonth)};}// Se non c'è un mese precedente disponibile, restituisci dati fittizi\nreturn{totaleTurni:280,mediaGiornaliera:9.3,massimoTurni:{day:15,shifts:20},minimoTurni:{day:30,shifts:1}};};// Funzione per ottenere la media annuale\nexport const getAnnualAverageData=()=>{const totalTurni=availableMonths.reduce((total,month)=>total+calculateTotalShifts(month),0);const averageTurni=totalTurni/availableMonths.length;return{mediaAnnuale:averageTurni};};export const getYearData=year=>{const yearData=availableMonths.filter(m=>m.year.toString()===year);if(yearData.length>0){const totaleTurni=yearData.reduce((total,month)=>total+calculateTotalShifts(month),0);return{totaleTurni,mediaMensile:totaleTurni/yearData.length};}return null;};// Funzione per ottenere la lista degli anni disponibili\nexport const getAvailableYears=()=>{const years=[...new Set(availableMonths.map(m=>m.year))];return years.map(year=>({value:year.toString(),label:year.toString()})).sort((a,b)=>b.value-a.value);// Ordina dal più recente al meno recente\n};// Funzione per ottenere i dati annuali\nexport const getYearlyData=year=>{const yearData={};availableMonths.forEach(month=>{if(month.year===year){yearData[month.month-1]={totaleTurni:calculateTotalShifts(month)};}});if(Object.keys(yearData).length===0){for(let i=0;i<12;i++){yearData[i]={totaleTurni:0};}}return yearData;};","map":{"version":3,"names":["julyData","year","month","days","augustData","availableMonths","calculateTotalShifts","data","Object","values","reduce","total","shifts","getMonthData","yearMonth","split","map","Number","monthData","find","m","totaleTurni","mediaGiornaliera","calculateAverageWorkdayShifts","massimoTurni","findMaxShiftsDay","minimoTurni","findMinShiftsDay","getWorkdaysInMonth","date","Date","workdays","getMonth","dayOfWeek","getDay","setDate","getDate","getAvailableMonths","value","toString","padStart","label","getMonthName","sortValue","sort","a","b","_ref","monthNumber","monthNames","calculateAverageShifts","daysInMonth","keys","length","entries","max","_ref2","day","parseInt","min","_ref3","getLastAvailableMonth","latest","current","getLatestMonthData","lastMonth","getPreviousMonthData","previousMonthIndex","findIndex","previousMonth","getAnnualAverageData","totalTurni","averageTurni","mediaAnnuale","getYearData","yearData","filter","mediaMensile","getAvailableYears","years","Set","getYearlyData","forEach","i"],"sources":["/Users/marcoaugustocomba/Desktop/Studio Stats/dashboard-pumaisdue/src/data.js"],"sourcesContent":["// Struttura dati per luglio 2024\nconst julyData = {\n  year: 2024,\n  month: 7, // Luglio\n  days: {\n    1: 19, 2: 16, 3: 26, 4: 15, 5: 7, 6: 0, 7: 0,\n    8: 20, 9: 22, 10: 25, 11: 16, 12: 21, 13: 0, 14: 0,\n    15: 14, 16: 18, 17: 18, 18: 22, 19: 12, 20: 0, 21: 0,\n    22: 18, 23: 13, 24: 17, 25: 23, 26: 21, 27: 0, 28: 0,\n    29: 29, 30: 28, 31: 22\n  }\n};\n\n// Struttura dati per agosto 2024\nconst augustData = {\n  year: 2024,\n  month: 8, // Agosto\n  days: {\n    1: 19, 2: 11, 3: 0, 4: 0, 5: 10, 6: 5, 7: 5,\n    8: 6, 9: 2, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0,\n    15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 0, 21: 0,\n    22: 0, 23: 0, 24: 0, 25: 0, 26: 7, 27: 7, 28: 8,\n    29: 12, 30: 8, 31: 0\n  }\n};\n\n// Array di tutti i mesi disponibili\nconst availableMonths = [julyData, augustData];\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = (data) => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\nexport const getMonthData = (yearMonth) => {\n  const [year, month] = yearMonth.split('-').map(Number);\n  const monthData = availableMonths.find(m => m.year === year && m.month === month);\n  \n  if (monthData) {\n    return {\n      totaleTurni: calculateTotalShifts(monthData),\n      mediaGiornaliera: calculateAverageWorkdayShifts(monthData),\n      massimoTurni: findMaxShiftsDay(monthData),\n      minimoTurni: findMinShiftsDay(monthData)\n    };\n  }\n  \n  return null;\n};\n\n// Funzione per calcolare il numero di giorni lavorativi in un mese\nconst getWorkdaysInMonth = (year, month) => {\n  const date = new Date(year, month - 1, 1);\n  let workdays = 0;\n  while (date.getMonth() === month - 1) {\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) workdays++;\n    date.setDate(date.getDate() + 1);\n  }\n  return workdays;\n};\n\n// Funzione per calcolare la media giornaliera dei turni solo per i giorni lavorativi\nconst calculateAverageWorkdayShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const workdays = getWorkdaysInMonth(data.year, data.month);\n  return total / workdays;\n};\n\n// Funzione per ottenere la lista dei mesi disponibili\n\nexport const getAvailableMonths = () => {\n  return availableMonths\n    .map(m => ({\n      value: `${m.year}-${m.month.toString().padStart(2, '0')}`,\n      label: `${getMonthName(m.month)} ${m.year}`,\n      sortValue: m.year * 12 + m.month // Utilizziamo questo per ordinare\n    }))\n    .sort((a, b) => b.sortValue - a.sortValue) // Ordina dal più recente al meno recente\n    .map(({ value, label }) => ({ value, label })); // Rimuove sortValue dall'output finale\n};\n\n// Funzione di utilità per ottenere il nome del mese\nconst getMonthName = (monthNumber) => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n                      'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? { day: parseInt(day), shifts } : max;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return (shifts < min.shifts || min.shifts === 0) ? { day: parseInt(day), shifts } : min;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth = () => {\n  return availableMonths.reduce((latest, current) => {\n    if (current.year > latest.year) return current;\n    if (current.year === latest.year && current.month > latest.month) return current;\n    return latest;\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageWorkdayShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  const previousMonthIndex = availableMonths.findIndex(m => m === lastMonth) - 1;\n  if (previousMonthIndex >= 0) {\n    const previousMonth = availableMonths[previousMonthIndex];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: { day: 15, shifts: 20 },\n    minimoTurni: { day: 30, shifts: 1 }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  const totalTurni = availableMonths.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / availableMonths.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\n\nexport const getYearData = (year) => {\n  const yearData = availableMonths.filter(m => m.year.toString() === year);\n  if (yearData.length > 0) {\n    const totaleTurni = yearData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n    return {\n      totaleTurni,\n      mediaMensile: totaleTurni / yearData.length\n    };\n  }\n  return null;\n};\n\n// Funzione per ottenere la lista degli anni disponibili\nexport const getAvailableYears = () => {\n  const years = [...new Set(availableMonths.map(m => m.year))];\n  return years\n    .map(year => ({\n      value: year.toString(),\n      label: year.toString()\n    }))\n    .sort((a, b) => b.value - a.value); // Ordina dal più recente al meno recente\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = (year) => {\n  const yearData = {};\n  availableMonths.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = { totaleTurni: calculateTotalShifts(month) };\n    }\n  });\n\n  if (Object.keys(yearData).length === 0) {\n    for (let i = 0; i < 12; i++) {\n      yearData[i] = { totaleTurni: 0 };\n    }\n  }\n\n  return yearData;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}