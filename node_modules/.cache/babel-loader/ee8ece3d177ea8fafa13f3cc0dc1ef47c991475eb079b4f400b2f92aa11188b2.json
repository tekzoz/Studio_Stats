{"ast":null,"code":"// Struttura dati per luglio 2024\nconst julyData = {\n  year: 2024,\n  month: 7,\n  // Luglio\n  days: {\n    1: 19,\n    2: 16,\n    3: 26,\n    4: 15,\n    5: 7,\n    6: 0,\n    7: 0,\n    8: 20,\n    9: 22,\n    10: 25,\n    11: 16,\n    12: 21,\n    13: 0,\n    14: 0,\n    15: 14,\n    16: 18,\n    17: 18,\n    18: 22,\n    19: 12,\n    20: 0,\n    21: 0,\n    22: 18,\n    23: 13,\n    24: 17,\n    25: 23,\n    26: 21,\n    27: 0,\n    28: 0,\n    29: 29,\n    30: 28,\n    31: 22\n  }\n};\n\n// Struttura dati per agosto 2024\nconst augustData = {\n  year: 2024,\n  month: 8,\n  // Agosto\n  days: {\n    1: 19,\n    2: 11,\n    3: 0,\n    4: 0,\n    5: 10,\n    6: 5,\n    7: 5,\n    8: 6,\n    9: 2,\n    10: 0,\n    11: 0,\n    12: 0,\n    13: 0,\n    14: 0,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 0,\n    21: 0,\n    22: 0,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 7,\n    27: 7,\n    28: 8,\n    29: 12,\n    30: 8,\n    31: 0\n  }\n};\n\n// Array di tutti i mesi disponibili\nconst availableMonths = [julyData, augustData];\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = data => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = data => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = data => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? {\n      day: parseInt(day),\n      shifts\n    } : max;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = data => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return shifts < min.shifts || min.shifts === 0 ? {\n      day: parseInt(day),\n      shifts\n    } : min;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth = () => {\n  return availableMonths.reduce((latest, current) => {\n    if (current.year > latest.year) return current;\n    if (current.year === latest.year && current.month > latest.month) return current;\n    return latest;\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  const previousMonthIndex = availableMonths.findIndex(m => m === lastMonth) - 1;\n  if (previousMonthIndex >= 0) {\n    const previousMonth = availableMonths[previousMonthIndex];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: {\n      day: 15,\n      shifts: 20\n    },\n    minimoTurni: {\n      day: 30,\n      shifts: 1\n    }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  const totalTurni = availableMonths.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / availableMonths.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = year => {\n  const yearData = {};\n  availableMonths.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = {\n        totaleTurni: calculateTotalShifts(month)\n      };\n    }\n  });\n  return yearData;\n};","map":{"version":3,"names":["julyData","year","month","days","augustData","availableMonths","calculateTotalShifts","data","Object","values","reduce","total","shifts","calculateAverageShifts","daysInMonth","keys","length","findMaxShiftsDay","entries","max","day","parseInt","findMinShiftsDay","min","getLastAvailableMonth","latest","current","getLatestMonthData","lastMonth","totaleTurni","mediaGiornaliera","massimoTurni","minimoTurni","getPreviousMonthData","previousMonthIndex","findIndex","m","previousMonth","getAnnualAverageData","totalTurni","averageTurni","mediaAnnuale","getYearlyData","yearData","forEach"],"sources":["/Users/marcoaugustocomba/Desktop/Studio Stats/dashboard-pumaisdue/src/data.js"],"sourcesContent":["// Struttura dati per luglio 2024\nconst julyData = {\n  year: 2024,\n  month: 7, // Luglio\n  days: {\n    1: 19, 2: 16, 3: 26, 4: 15, 5: 7, 6: 0, 7: 0,\n    8: 20, 9: 22, 10: 25, 11: 16, 12: 21, 13: 0, 14: 0,\n    15: 14, 16: 18, 17: 18, 18: 22, 19: 12, 20: 0, 21: 0,\n    22: 18, 23: 13, 24: 17, 25: 23, 26: 21, 27: 0, 28: 0,\n    29: 29, 30: 28, 31: 22\n  }\n};\n\n// Struttura dati per agosto 2024\nconst augustData = {\n  year: 2024,\n  month: 8, // Agosto\n  days: {\n    1: 19, 2: 11, 3: 0, 4: 0, 5: 10, 6: 5, 7: 5,\n    8: 6, 9: 2, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0,\n    15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 0, 21: 0,\n    22: 0, 23: 0, 24: 0, 25: 0, 26: 7, 27: 7, 28: 8,\n    29: 12, 30: 8, 31: 0\n  }\n};\n\n// Array di tutti i mesi disponibili\nconst availableMonths = [julyData, augustData];\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = (data) => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? { day: parseInt(day), shifts } : max;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return (shifts < min.shifts || min.shifts === 0) ? { day: parseInt(day), shifts } : min;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth = () => {\n  return availableMonths.reduce((latest, current) => {\n    if (current.year > latest.year) return current;\n    if (current.year === latest.year && current.month > latest.month) return current;\n    return latest;\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  const previousMonthIndex = availableMonths.findIndex(m => m === lastMonth) - 1;\n  if (previousMonthIndex >= 0) {\n    const previousMonth = availableMonths[previousMonthIndex];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: { day: 15, shifts: 20 },\n    minimoTurni: { day: 30, shifts: 1 }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  const totalTurni = availableMonths.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / availableMonths.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = (year) => {\n  const yearData = {};\n  availableMonths.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = { totaleTurni: calculateTotalShifts(month) };\n    }\n  });\n  return yearData;\n};"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG;EACfC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EAAE;EACVC,IAAI,EAAE;IACJ,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAC5C,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAClD,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IACpD,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IACpD,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE;EACtB;AACF,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG;EACjBH,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EAAE;EACVC,IAAI,EAAE;IACJ,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAC3C,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAC7C,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAC/C,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAC/C,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE;EACrB;AACF,CAAC;;AAED;AACA,MAAME,eAAe,GAAG,CAACL,QAAQ,EAAEI,UAAU,CAAC;;AAE9C;AACA,MAAME,oBAAoB,GAAIC,IAAI,IAAK;EACrC,OAAOC,MAAM,CAACC,MAAM,CAACF,IAAI,CAACJ,IAAI,CAAC,CAACO,MAAM,CAAC,CAACC,KAAK,EAAEC,MAAM,KAAKD,KAAK,GAAGC,MAAM,EAAE,CAAC,CAAC;AAC9E,CAAC;;AAED;AACA,MAAMC,sBAAsB,GAAIN,IAAI,IAAK;EACvC,MAAMI,KAAK,GAAGL,oBAAoB,CAACC,IAAI,CAAC;EACxC,MAAMO,WAAW,GAAGN,MAAM,CAACO,IAAI,CAACR,IAAI,CAACJ,IAAI,CAAC,CAACa,MAAM;EACjD,OAAOL,KAAK,GAAGG,WAAW;AAC5B,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAIV,IAAI,IAAK;EACjC,OAAOC,MAAM,CAACU,OAAO,CAACX,IAAI,CAACJ,IAAI,CAAC,CAACO,MAAM,CAAC,CAACS,GAAG,EAAE,CAACC,GAAG,EAAER,MAAM,CAAC,KAAK;IAC9D,OAAOA,MAAM,GAAGO,GAAG,CAACP,MAAM,GAAG;MAAEQ,GAAG,EAAEC,QAAQ,CAACD,GAAG,CAAC;MAAER;IAAO,CAAC,GAAGO,GAAG;EACnE,CAAC,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAER,MAAM,EAAE;EAAE,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,MAAMU,gBAAgB,GAAIf,IAAI,IAAK;EACjC,OAAOC,MAAM,CAACU,OAAO,CAACX,IAAI,CAACJ,IAAI,CAAC,CAACO,MAAM,CAAC,CAACa,GAAG,EAAE,CAACH,GAAG,EAAER,MAAM,CAAC,KAAK;IAC9D,IAAIA,MAAM,KAAK,CAAC,EAAE,OAAOW,GAAG;IAC5B,OAAQX,MAAM,GAAGW,GAAG,CAACX,MAAM,IAAIW,GAAG,CAACX,MAAM,KAAK,CAAC,GAAI;MAAEQ,GAAG,EAAEC,QAAQ,CAACD,GAAG,CAAC;MAAER;IAAO,CAAC,GAAGW,GAAG;EACzF,CAAC,EAAE;IAAEH,GAAG,EAAE,CAAC;IAAER,MAAM,EAAE;EAAE,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,MAAMY,qBAAqB,GAAGA,CAAA,KAAM;EAClC,OAAOnB,eAAe,CAACK,MAAM,CAAC,CAACe,MAAM,EAAEC,OAAO,KAAK;IACjD,IAAIA,OAAO,CAACzB,IAAI,GAAGwB,MAAM,CAACxB,IAAI,EAAE,OAAOyB,OAAO;IAC9C,IAAIA,OAAO,CAACzB,IAAI,KAAKwB,MAAM,CAACxB,IAAI,IAAIyB,OAAO,CAACxB,KAAK,GAAGuB,MAAM,CAACvB,KAAK,EAAE,OAAOwB,OAAO;IAChF,OAAOD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMC,SAAS,GAAGJ,qBAAqB,CAAC,CAAC;EACzC,OAAO;IACLK,WAAW,EAAEvB,oBAAoB,CAACsB,SAAS,CAAC;IAC5CE,gBAAgB,EAAEjB,sBAAsB,CAACe,SAAS,CAAC;IACnDG,YAAY,EAAEd,gBAAgB,CAACW,SAAS,CAAC;IACzCI,WAAW,EAAEV,gBAAgB,CAACM,SAAS;EACzC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMK,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAML,SAAS,GAAGJ,qBAAqB,CAAC,CAAC;EACzC,MAAMU,kBAAkB,GAAG7B,eAAe,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,KAAKR,SAAS,CAAC,GAAG,CAAC;EAC9E,IAAIM,kBAAkB,IAAI,CAAC,EAAE;IAC3B,MAAMG,aAAa,GAAGhC,eAAe,CAAC6B,kBAAkB,CAAC;IACzD,OAAO;MACLL,WAAW,EAAEvB,oBAAoB,CAAC+B,aAAa,CAAC;MAChDP,gBAAgB,EAAEjB,sBAAsB,CAACwB,aAAa,CAAC;MACvDN,YAAY,EAAEd,gBAAgB,CAACoB,aAAa,CAAC;MAC7CL,WAAW,EAAEV,gBAAgB,CAACe,aAAa;IAC7C,CAAC;EACH;EACA;EACA,OAAO;IACLR,WAAW,EAAE,GAAG;IAChBC,gBAAgB,EAAE,GAAG;IACrBC,YAAY,EAAE;MAAEX,GAAG,EAAE,EAAE;MAAER,MAAM,EAAE;IAAG,CAAC;IACrCoB,WAAW,EAAE;MAAEZ,GAAG,EAAE,EAAE;MAAER,MAAM,EAAE;IAAE;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAM0B,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,UAAU,GAAGlC,eAAe,CAACK,MAAM,CAAC,CAACC,KAAK,EAAET,KAAK,KAAKS,KAAK,GAAGL,oBAAoB,CAACJ,KAAK,CAAC,EAAE,CAAC,CAAC;EACnG,MAAMsC,YAAY,GAAGD,UAAU,GAAGlC,eAAe,CAACW,MAAM;EACxD,OAAO;IACLyB,YAAY,EAAED;EAChB,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAIzC,IAAI,IAAK;EACrC,MAAM0C,QAAQ,GAAG,CAAC,CAAC;EACnBtC,eAAe,CAACuC,OAAO,CAAC1C,KAAK,IAAI;IAC/B,IAAIA,KAAK,CAACD,IAAI,KAAKA,IAAI,EAAE;MACvB0C,QAAQ,CAACzC,KAAK,CAACA,KAAK,GAAG,CAAC,CAAC,GAAG;QAAE2B,WAAW,EAAEvB,oBAAoB,CAACJ,KAAK;MAAE,CAAC;IAC1E;EACF,CAAC,CAAC;EACF,OAAOyC,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}