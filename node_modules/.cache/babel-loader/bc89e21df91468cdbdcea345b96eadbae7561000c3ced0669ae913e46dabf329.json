{"ast":null,"code":"// Struttura dati per luglio 2024\nconst julyData = {\n  year: 2024,\n  month: 7,\n  // Luglio\n  days: {\n    1: 19,\n    2: 16,\n    3: 26,\n    4: 15,\n    5: 7,\n    6: 0,\n    7: 0,\n    8: 20,\n    9: 22,\n    10: 25,\n    11: 16,\n    12: 21,\n    13: 0,\n    14: 0,\n    15: 14,\n    16: 18,\n    17: 18,\n    18: 22,\n    19: 12,\n    20: 0,\n    21: 0,\n    22: 18,\n    23: 13,\n    24: 17,\n    25: 23,\n    26: 21,\n    27: 0,\n    28: 0,\n    29: 29,\n    30: 28,\n    31: 22\n  }\n};\n\n// Struttura dati per agosto 2024\nconst augustData = {\n  year: 2024,\n  month: 8,\n  // Agosto\n  days: {\n    1: 19,\n    2: 11,\n    3: 0,\n    4: 0,\n    5: 10,\n    6: 5,\n    7: 5,\n    8: 6,\n    9: 2,\n    10: 0,\n    11: 0,\n    12: 0,\n    13: 0,\n    14: 0,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 0,\n    21: 0,\n    22: 0,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 7,\n    27: 7,\n    28: 8,\n    29: 12,\n    30: 8,\n    31: 0\n  }\n};\n\n// Array di tutti i mesi disponibili\nconst availableMonths = [julyData, augustData];\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = data => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\nexport const getMonthData = yearMonth => {\n  const [year, month] = yearMonth.split('-').map(Number);\n  const monthData = availableMonths.find(m => m.year === year && m.month === month);\n  if (monthData) {\n    return {\n      totaleTurni: calculateTotalShifts(monthData),\n      mediaGiornaliera: calculateAverageWorkdayShifts(monthData),\n      massimoTurni: findMaxShiftsDay(monthData),\n      minimoTurni: findMinShiftsDay(monthData)\n    };\n  }\n  return null;\n};\n\n// Funzione per calcolare il numero di giorni lavorativi in un mese\nconst getWorkdaysInMonth = (year, month) => {\n  const date = new Date(year, month - 1, 1);\n  let workdays = 0;\n  while (date.getMonth() === month - 1) {\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) workdays++;\n    date.setDate(date.getDate() + 1);\n  }\n  return workdays;\n};\n\n// Funzione per calcolare la media giornaliera dei turni solo per i giorni lavorativi\nconst calculateAverageWorkdayShifts = data => {\n  const total = calculateTotalShifts(data);\n  const workdays = getWorkdaysInMonth(data.year, data.month);\n  return total / workdays;\n};\n\n// Funzione per ottenere la lista dei mesi disponibili\n\nexport const getAvailableMonths = () => {\n  return availableMonths.map(m => ({\n    value: `${m.year}-${m.month.toString().padStart(2, '0')}`,\n    label: `${getMonthName(m.month)} ${m.year}`,\n    sortValue: m.year * 12 + m.month // Utilizziamo questo per ordinare\n  })).sort((a, b) => b.sortValue - a.sortValue) // Ordina dal più recente al meno recente\n  .map(({\n    value,\n    label\n  }) => ({\n    value,\n    label\n  })); // Rimuove sortValue dall'output finale\n};\n\n// Funzione di utilità per ottenere il nome del mese\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = data => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = data => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? {\n      day: parseInt(day),\n      shifts\n    } : max;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = data => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return shifts < min.shifts || min.shifts === 0 ? {\n      day: parseInt(day),\n      shifts\n    } : min;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth = () => {\n  return availableMonths.reduce((latest, current) => {\n    if (current.year > latest.year) return current;\n    if (current.year === latest.year && current.month > latest.month) return current;\n    return latest;\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageWorkdayShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  const previousMonthIndex = availableMonths.findIndex(m => m === lastMonth) - 1;\n  if (previousMonthIndex >= 0) {\n    const previousMonth = availableMonths[previousMonthIndex];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: {\n      day: 15,\n      shifts: 20\n    },\n    minimoTurni: {\n      day: 30,\n      shifts: 1\n    }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  const totalTurni = availableMonths.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / availableMonths.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\nexport const getYearData = year => {\n  const yearData = availableMonths.filter(m => m.year.toString() === year);\n  if (yearData.length > 0) {\n    const totaleTurni = yearData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n    return {\n      totaleTurni,\n      mediaMensile: totaleTurni / yearData.length\n    };\n  }\n  return null;\n};\n\n// Funzione per ottenere la lista degli anni disponibili\nexport const getAvailableYears = () => {\n  const years = [...new Set(availableMonths.map(m => m.year))];\n  return years.map(year => ({\n    value: year.toString(),\n    label: year.toString()\n  })).sort((a, b) => b.value - a.value); // Ordina dal più recente al meno recente\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = year => {\n  const yearData = {};\n  availableMonths.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = {\n        totaleTurni: calculateTotalShifts(month)\n      };\n    }\n  });\n  if (Object.keys(yearData).length === 0) {\n    for (let i = 0; i < 12; i++) {\n      yearData[i] = {\n        totaleTurni: 0\n      };\n    }\n  }\n  return yearData;\n};","map":{"version":3,"names":["julyData","year","month","days","augustData","availableMonths","calculateTotalShifts","data","Object","values","reduce","total","shifts","getMonthData","yearMonth","split","map","Number","monthData","find","m","totaleTurni","mediaGiornaliera","calculateAverageWorkdayShifts","massimoTurni","findMaxShiftsDay","minimoTurni","findMinShiftsDay","getWorkdaysInMonth","date","Date","workdays","getMonth","dayOfWeek","getDay","setDate","getDate","getAvailableMonths","value","toString","padStart","label","getMonthName","sortValue","sort","a","b","monthNumber","monthNames","calculateAverageShifts","daysInMonth","keys","length","entries","max","day","parseInt","min","getLastAvailableMonth","latest","current","getLatestMonthData","lastMonth","getPreviousMonthData","previousMonthIndex","findIndex","previousMonth","getAnnualAverageData","totalTurni","averageTurni","mediaAnnuale","getYearData","yearData","filter","mediaMensile","getAvailableYears","years","Set","getYearlyData","forEach","i"],"sources":["/Users/marcoaugustocomba/Desktop/Studio Stats/dashboard-pumaisdue/src/data.js"],"sourcesContent":["// Struttura dati per luglio 2024\nconst julyData = {\n  year: 2024,\n  month: 7, // Luglio\n  days: {\n    1: 19, 2: 16, 3: 26, 4: 15, 5: 7, 6: 0, 7: 0,\n    8: 20, 9: 22, 10: 25, 11: 16, 12: 21, 13: 0, 14: 0,\n    15: 14, 16: 18, 17: 18, 18: 22, 19: 12, 20: 0, 21: 0,\n    22: 18, 23: 13, 24: 17, 25: 23, 26: 21, 27: 0, 28: 0,\n    29: 29, 30: 28, 31: 22\n  }\n};\n\n// Struttura dati per agosto 2024\nconst augustData = {\n  year: 2024,\n  month: 8, // Agosto\n  days: {\n    1: 19, 2: 11, 3: 0, 4: 0, 5: 10, 6: 5, 7: 5,\n    8: 6, 9: 2, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0,\n    15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 0, 21: 0,\n    22: 0, 23: 0, 24: 0, 25: 0, 26: 7, 27: 7, 28: 8,\n    29: 12, 30: 8, 31: 0\n  }\n};\n\n// Array di tutti i mesi disponibili\nconst availableMonths = [julyData, augustData];\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = (data) => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\nexport const getMonthData = (yearMonth) => {\n  const [year, month] = yearMonth.split('-').map(Number);\n  const monthData = availableMonths.find(m => m.year === year && m.month === month);\n  \n  if (monthData) {\n    return {\n      totaleTurni: calculateTotalShifts(monthData),\n      mediaGiornaliera: calculateAverageWorkdayShifts(monthData),\n      massimoTurni: findMaxShiftsDay(monthData),\n      minimoTurni: findMinShiftsDay(monthData)\n    };\n  }\n  \n  return null;\n};\n\n// Funzione per calcolare il numero di giorni lavorativi in un mese\nconst getWorkdaysInMonth = (year, month) => {\n  const date = new Date(year, month - 1, 1);\n  let workdays = 0;\n  while (date.getMonth() === month - 1) {\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) workdays++;\n    date.setDate(date.getDate() + 1);\n  }\n  return workdays;\n};\n\n// Funzione per calcolare la media giornaliera dei turni solo per i giorni lavorativi\nconst calculateAverageWorkdayShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const workdays = getWorkdaysInMonth(data.year, data.month);\n  return total / workdays;\n};\n\n// Funzione per ottenere la lista dei mesi disponibili\n\nexport const getAvailableMonths = () => {\n  return availableMonths\n    .map(m => ({\n      value: `${m.year}-${m.month.toString().padStart(2, '0')}`,\n      label: `${getMonthName(m.month)} ${m.year}`,\n      sortValue: m.year * 12 + m.month // Utilizziamo questo per ordinare\n    }))\n    .sort((a, b) => b.sortValue - a.sortValue) // Ordina dal più recente al meno recente\n    .map(({ value, label }) => ({ value, label })); // Rimuove sortValue dall'output finale\n};\n\n// Funzione di utilità per ottenere il nome del mese\nconst getMonthName = (monthNumber) => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n                      'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? { day: parseInt(day), shifts } : max;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return (shifts < min.shifts || min.shifts === 0) ? { day: parseInt(day), shifts } : min;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per ottenere l'ultimo mese disponibile\nconst getLastAvailableMonth = () => {\n  return availableMonths.reduce((latest, current) => {\n    if (current.year > latest.year) return current;\n    if (current.year === latest.year && current.month > latest.month) return current;\n    return latest;\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageWorkdayShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  const lastMonth = getLastAvailableMonth();\n  const previousMonthIndex = availableMonths.findIndex(m => m === lastMonth) - 1;\n  if (previousMonthIndex >= 0) {\n    const previousMonth = availableMonths[previousMonthIndex];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: { day: 15, shifts: 20 },\n    minimoTurni: { day: 30, shifts: 1 }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  const totalTurni = availableMonths.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / availableMonths.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\n\nexport const getYearData = (year) => {\n  const yearData = availableMonths.filter(m => m.year.toString() === year);\n  if (yearData.length > 0) {\n    const totaleTurni = yearData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n    return {\n      totaleTurni,\n      mediaMensile: totaleTurni / yearData.length\n    };\n  }\n  return null;\n};\n\n// Funzione per ottenere la lista degli anni disponibili\nexport const getAvailableYears = () => {\n  const years = [...new Set(availableMonths.map(m => m.year))];\n  return years\n    .map(year => ({\n      value: year.toString(),\n      label: year.toString()\n    }))\n    .sort((a, b) => b.value - a.value); // Ordina dal più recente al meno recente\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = (year) => {\n  const yearData = {};\n  availableMonths.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = { totaleTurni: calculateTotalShifts(month) };\n    }\n  });\n\n  if (Object.keys(yearData).length === 0) {\n    for (let i = 0; i < 12; i++) {\n      yearData[i] = { totaleTurni: 0 };\n    }\n  }\n\n  return yearData;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}