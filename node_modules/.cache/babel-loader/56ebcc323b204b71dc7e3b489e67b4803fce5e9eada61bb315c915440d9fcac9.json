{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats/StudioStats/src/LastYearView.js\";\nimport React from 'react';\nimport { ArrowLeft, Calendar, TrendingUp, TrendingDown, Activity, List } from 'lucide-react';\nimport { getYearlyData } from './data';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine, Label } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthNames = ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'];\nconst processYearlyData = data => {\n  var _data$monthWithMostTu, _data$monthWithLeastT;\n  if (!data || Object.keys(data).length === 0) return null;\n  const months = Object.keys(data);\n  const lastAvailableMonth = Math.max(...months.map(Number));\n  const totalTurni = months.filter(month => Number(month) <= lastAvailableMonth).reduce((sum, month) => {\n    var _data$month;\n    return sum + (((_data$month = data[month]) === null || _data$month === void 0 ? void 0 : _data$month.totaleTurni) || 0);\n  }, 0);\n  const avgTurni = totalTurni / (lastAvailableMonth + 1);\n  const [monthWithMostTurni, monthWithLeastTurni] = months.filter(month => Number(month) <= lastAvailableMonth).reduce(([max, min], month) => {\n    var _data$month2, _data$max, _data$min;\n    const turni = ((_data$month2 = data[month]) === null || _data$month2 === void 0 ? void 0 : _data$month2.totaleTurni) || 0;\n    return [turni > (((_data$max = data[max]) === null || _data$max === void 0 ? void 0 : _data$max.totaleTurni) || 0) ? month : max, turni < (((_data$min = data[min]) === null || _data$min === void 0 ? void 0 : _data$min.totaleTurni) || 0) && turni > 0 ? month : min];\n  }, [months[0], months[0]]);\n  return {\n    totalTurni,\n    avgTurni,\n    lastAvailableMonth,\n    monthWithMostTurni: {\n      month: parseInt(monthWithMostTurni) + 1,\n      value: ((_data$monthWithMostTu = data[monthWithMostTurni]) === null || _data$monthWithMostTu === void 0 ? void 0 : _data$monthWithMostTu.totaleTurni) || 0\n    },\n    monthWithLeastTurni: {\n      month: parseInt(monthWithLeastTurni) + 1,\n      value: ((_data$monthWithLeastT = data[monthWithLeastTurni]) === null || _data$monthWithLeastT === void 0 ? void 0 : _data$monthWithLeastT.totaleTurni) || 0\n    },\n    data\n  };\n};\nconst calculateComparisons = (currentYear, currentData, previousYears, type) => {\n  const comparisons = [];\n  const currentValue = type === 'total' ? currentData.totalTurni : currentData.avgTurni;\n  const lastMonth = currentData.lastAvailableMonth;\n  for (let i = 1; i <= 3; i++) {\n    const year = currentYear - i;\n    const previousYearData = processYearlyData(getYearlyData(year));\n    if (previousYearData) {\n      const relevantMonths = Object.keys(previousYearData.data).filter(month => Number(month) <= lastMonth);\n      let previousValue;\n      if (type === 'total') {\n        previousValue = relevantMonths.reduce((sum, month) => {\n          var _previousYearData$dat;\n          return sum + (((_previousYearData$dat = previousYearData.data[month]) === null || _previousYearData$dat === void 0 ? void 0 : _previousYearData$dat.totaleTurni) || 0);\n        }, 0);\n      } else {\n        // 'average'\n        const previousTotal = relevantMonths.reduce((sum, month) => {\n          var _previousYearData$dat2;\n          return sum + (((_previousYearData$dat2 = previousYearData.data[month]) === null || _previousYearData$dat2 === void 0 ? void 0 : _previousYearData$dat2.totaleTurni) || 0);\n        }, 0);\n        previousValue = previousTotal / (lastMonth + 1);\n      }\n      const diff = currentValue - previousValue;\n      const percentage = diff / previousValue * 100;\n      const comparison = percentage > 0 ? `+${percentage.toFixed(1)}%` : `${percentage.toFixed(1)}%`;\n      comparisons.push({\n        year,\n        comparison,\n        period: `Gen-${monthNames[lastMonth]}`\n      });\n    }\n  }\n  return comparisons;\n};\nconst StatCard = ({\n  icon,\n  label,\n  value,\n  comparisons,\n  backgroundColor\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    backgroundColor,\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '20px',\n    display: 'flex',\n    flexDirection: 'column',\n    flex: '1 1 calc(50% - 10px)',\n    marginBottom: '20px'\n  },\n  role: \"region\",\n  \"aria-label\": label,\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '12px'\n    },\n    children: [/*#__PURE__*/React.cloneElement(icon, {\n      size: 24,\n      color: '#4B5563',\n      'aria-hidden': 'true'\n    }), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginLeft: '12px',\n        fontSize: '16px',\n        fontWeight: '500',\n        color: '#4B5563'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: '24px',\n      fontWeight: 'bold',\n      color: '#1F2937',\n      marginBottom: '8px'\n    },\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this), comparisons && comparisons.map((comp, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: '14px',\n      marginBottom: '4px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: comp.comparison === 'N/A' ? 'gray' : parseFloat(comp.comparison) > 0 ? 'green' : 'red',\n        fontWeight: 'bold'\n      },\n      children: [comp.comparison, \" rispetto all'anno \", comp.year, \" (\", comp.period, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 7\n  }, this))]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 3\n}, this);\n_c = StatCard;\nconst YearlyChart = ({\n  data,\n  averageTurni,\n  lastAvailableMonth\n}) => {\n  const chartData = Object.entries(data).filter(([month]) => Number(month) <= lastAvailableMonth).map(([month, {\n    totaleTurni\n  }]) => ({\n    name: monthNames[parseInt(month)],\n    turniDoppiaggio: totaleTurni\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      borderRadius: '12px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      padding: '20px',\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginBottom: '20px',\n        color: '#4B5563'\n      },\n      children: \"Andamento Annuale dei Turni di Doppiaggio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"turniDoppiaggio\",\n          name: \"Turni di Doppiaggio\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: averageTurni,\n          stroke: \"red\",\n          strokeDasharray: \"3 3\",\n          children: /*#__PURE__*/_jsxDEV(Label, {\n            value: \"Media Annuale\",\n            position: \"insideTopLeft\",\n            fill: \"red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '10px',\n        fontSize: '14px',\n        color: '#4B5563'\n      },\n      children: [\"Media Annuale: \", averageTurni.toFixed(2), \" turni\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_c2 = YearlyChart;\nconst MonthlyListCard = ({\n  data,\n  lastAvailableMonth\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    backgroundColor: 'white',\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '20px',\n    marginBottom: '20px'\n  },\n  role: \"region\",\n  \"aria-label\": \"Lista Mensile dei Turni di Doppiaggio\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      size: 24,\n      color: \"#4B5563\",\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginLeft: '12px',\n        fontSize: '18px',\n        fontWeight: '500',\n        color: '#4B5563'\n      },\n      children: \"Lista Mensile dei Turni di Doppiaggio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: Object.entries(data).filter(([month]) => Number(month) <= lastAvailableMonth).map(([month, {\n      totaleTurni\n    }]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: '8px',\n        borderBottom: '1px solid #E5E7EB',\n        paddingBottom: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#4B5563'\n        },\n        children: monthNames[parseInt(month)]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: 'bold',\n          color: '#1F2937'\n        },\n        children: totaleTurni\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 149,\n  columnNumber: 3\n}, this);\n_c3 = MonthlyListCard;\nconst LastYearView = ({\n  setView,\n  year = new Date().getFullYear()\n}) => {\n  const yearlyData = getYearlyData(year);\n  const processedData = processYearlyData(yearlyData);\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#F0F9FF',\n        minHeight: '100vh',\n        padding: '24px',\n        fontFamily: \"'Helvetica Neue', Arial, sans-serif\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: '800px',\n          margin: '0 auto',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dati non disponibili\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ci scusiamo, ma i dati per l'anno \", year, \" non sono disponibili al momento.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setView('main'),\n          style: {\n            background: '#4B5563',\n            color: 'white',\n            border: 'none',\n            borderRadius: '8px',\n            padding: '10px 20px',\n            cursor: 'pointer',\n            fontSize: '16px',\n            marginTop: '20px'\n          },\n          children: \"Torna alla Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n  const totalComparisons = calculateComparisons(year, processedData, [year - 1, year - 2, year - 3], 'total');\n  const avgComparisons = calculateComparisons(year, processedData, [year - 1, year - 2, year - 3], 'average');\n  const stats = [{\n    icon: /*#__PURE__*/_jsxDEV(Calendar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this),\n    label: 'Totale Turni di Doppiaggio Annuali',\n    value: processedData.totalTurni,\n    comparisons: totalComparisons,\n    backgroundColor: '#E6F3FF'\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(Activity, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this),\n    label: 'Media Turni di Doppiaggio Mensile',\n    value: processedData.avgTurni.toFixed(1),\n    comparisons: avgComparisons,\n    backgroundColor: '#FFF0E6'\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(TrendingUp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this),\n    label: 'Mese con Più Turni di Doppiaggio',\n    value: `${processedData.monthWithMostTurni.value} (${monthNames[processedData.monthWithMostTurni.month - 1]})`,\n    backgroundColor: '#FFF0F0'\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(TrendingDown, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this),\n    label: 'Mese con Meno Turni di Doppiaggio',\n    value: `${processedData.monthWithLeastTurni.value} (${monthNames[processedData.monthWithLeastTurni.month - 1]})`,\n    backgroundColor: '#F0F0FF'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#F0F9FF',\n      minHeight: '100vh',\n      padding: '24px',\n      fontFamily: \"'Helvetica Neue', Arial, sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '800px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('main'),\n        style: {\n          background: '#4B5563',\n          color: 'white',\n          border: 'none',\n          borderRadius: '8px',\n          padding: '10px 20px',\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          fontSize: '16px',\n          marginBottom: '24px',\n          transition: 'background-color 0.3s'\n        },\n        onMouseOver: e => e.currentTarget.style.backgroundColor = '#374151',\n        onMouseOut: e => e.currentTarget.style.backgroundColor = '#4B5563',\n        children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n          size: 20,\n          style: {\n            marginRight: '8px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), \"Torna alla Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '32px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '8px',\n          color: '#1F2937'\n        },\n        children: \"Statistiche Anno\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: '28px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '32px',\n          color: '#4B5563'\n        },\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YearlyChart, {\n        data: processedData.data,\n        averageTurni: processedData.avgTurni,\n        lastAvailableMonth: processedData.lastAvailableMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'space-between'\n        },\n        children: stats.map((stat, index) => /*#__PURE__*/_jsxDEV(StatCard, {\n          ...stat\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MonthlyListCard, {\n        data: processedData.data,\n        lastAvailableMonth: processedData.lastAvailableMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_c4 = LastYearView;\nexport default LastYearView;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatCard\");\n$RefreshReg$(_c2, \"YearlyChart\");\n$RefreshReg$(_c3, \"MonthlyListCard\");\n$RefreshReg$(_c4, \"LastYearView\");","map":{"version":3,"names":["React","ArrowLeft","Calendar","TrendingUp","TrendingDown","Activity","List","getYearlyData","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","ReferenceLine","Label","jsxDEV","_jsxDEV","monthNames","processYearlyData","data","_data$monthWithMostTu","_data$monthWithLeastT","Object","keys","length","months","lastAvailableMonth","Math","max","map","Number","totalTurni","filter","month","reduce","sum","_data$month","totaleTurni","avgTurni","monthWithMostTurni","monthWithLeastTurni","min","_data$month2","_data$max","_data$min","turni","parseInt","value","calculateComparisons","currentYear","currentData","previousYears","type","comparisons","currentValue","lastMonth","i","year","previousYearData","relevantMonths","previousValue","_previousYearData$dat","previousTotal","_previousYearData$dat2","diff","percentage","comparison","toFixed","push","period","StatCard","icon","label","backgroundColor","style","borderRadius","boxShadow","padding","display","flexDirection","flex","marginBottom","role","children","alignItems","cloneElement","size","color","marginLeft","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","comp","index","parseFloat","_c","YearlyChart","averageTurni","chartData","entries","name","turniDoppiaggio","width","height","strokeDasharray","dataKey","stroke","strokeWidth","y","position","fill","textAlign","marginTop","_c2","MonthlyListCard","justifyContent","borderBottom","paddingBottom","_c3","LastYearView","setView","Date","getFullYear","yearlyData","processedData","minHeight","fontFamily","maxWidth","margin","onClick","background","border","cursor","totalComparisons","avgComparisons","stats","transition","onMouseOver","e","currentTarget","onMouseOut","marginRight","flexWrap","stat","_c4","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats/StudioStats/src/LastYearView.js"],"sourcesContent":["import React from 'react';\nimport { ArrowLeft, Calendar, TrendingUp, TrendingDown, Activity, List } from 'lucide-react';\nimport { getYearlyData } from './data';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine, Label } from 'recharts';\n\nconst monthNames = ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'];\n\nconst processYearlyData = (data) => {\n  if (!data || Object.keys(data).length === 0) return null;\n  \n  const months = Object.keys(data);\n  const lastAvailableMonth = Math.max(...months.map(Number));\n  \n  const totalTurni = months\n    .filter(month => Number(month) <= lastAvailableMonth)\n    .reduce((sum, month) => sum + (data[month]?.totaleTurni || 0), 0);\n  \n  const avgTurni = totalTurni / (lastAvailableMonth + 1);\n  \n  const [monthWithMostTurni, monthWithLeastTurni] = months\n    .filter(month => Number(month) <= lastAvailableMonth)\n    .reduce(([max, min], month) => {\n      const turni = data[month]?.totaleTurni || 0;\n      return [\n        turni > (data[max]?.totaleTurni || 0) ? month : max,\n        (turni < (data[min]?.totaleTurni || 0) && turni > 0) ? month : min\n      ];\n    }, [months[0], months[0]]);\n\n  return {\n    totalTurni,\n    avgTurni,\n    lastAvailableMonth,\n    monthWithMostTurni: {\n      month: parseInt(monthWithMostTurni) + 1,\n      value: data[monthWithMostTurni]?.totaleTurni || 0\n    },\n    monthWithLeastTurni: {\n      month: parseInt(monthWithLeastTurni) + 1,\n      value: data[monthWithLeastTurni]?.totaleTurni || 0\n    },\n    data\n  };\n};\n\nconst calculateComparisons = (currentYear, currentData, previousYears, type) => {\n  const comparisons = [];\n  const currentValue = type === 'total' ? currentData.totalTurni : currentData.avgTurni;\n  const lastMonth = currentData.lastAvailableMonth;\n\n  for (let i = 1; i <= 3; i++) {\n    const year = currentYear - i;\n    const previousYearData = processYearlyData(getYearlyData(year));\n    if (previousYearData) {\n      const relevantMonths = Object.keys(previousYearData.data)\n        .filter(month => Number(month) <= lastMonth);\n      \n      let previousValue;\n      if (type === 'total') {\n        previousValue = relevantMonths.reduce((sum, month) => sum + (previousYearData.data[month]?.totaleTurni || 0), 0);\n      } else { // 'average'\n        const previousTotal = relevantMonths.reduce((sum, month) => sum + (previousYearData.data[month]?.totaleTurni || 0), 0);\n        previousValue = previousTotal / (lastMonth + 1);\n      }\n      \n      const diff = currentValue - previousValue;\n      const percentage = (diff / previousValue) * 100;\n      const comparison = percentage > 0 ? `+${percentage.toFixed(1)}%` : `${percentage.toFixed(1)}%`;\n      \n      comparisons.push({\n        year,\n        comparison,\n        period: `Gen-${monthNames[lastMonth]}`\n      });\n    }\n  }\n\n  return comparisons;\n};\n\nconst StatCard = ({ icon, label, value, comparisons, backgroundColor }) => (\n  <div style={{\n    backgroundColor,\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '20px',\n    display: 'flex',\n    flexDirection: 'column',\n    flex: '1 1 calc(50% - 10px)',\n    marginBottom: '20px',\n  }}\n  role=\"region\"\n  aria-label={label}>\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>\n      {React.cloneElement(icon, { size: 24, color: '#4B5563', 'aria-hidden': 'true' })}\n      <span style={{ marginLeft: '12px', fontSize: '16px', fontWeight: '500', color: '#4B5563' }}>{label}</span>\n    </div>\n    <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1F2937', marginBottom: '8px' }}>{value}</div>\n    {comparisons && comparisons.map((comp, index) => (\n      <div key={index} style={{ fontSize: '14px', marginBottom: '4px' }}>\n        <span style={{ \n          color: comp.comparison === 'N/A' ? 'gray' : (parseFloat(comp.comparison) > 0 ? 'green' : 'red'),\n          fontWeight: 'bold' \n        }}>\n          {comp.comparison} rispetto all'anno {comp.year} ({comp.period})\n        </span>\n      </div>\n    ))}\n  </div>\n);\n\nconst YearlyChart = ({ data, averageTurni, lastAvailableMonth }) => {\n  const chartData = Object.entries(data)\n    .filter(([month]) => Number(month) <= lastAvailableMonth)\n    .map(([month, { totaleTurni }]) => ({\n      name: monthNames[parseInt(month)],\n      turniDoppiaggio: totaleTurni\n    }));\n\n  return (\n    <div style={{\n      backgroundColor: 'white',\n      borderRadius: '12px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      padding: '20px',\n      marginBottom: '20px',\n    }}>\n      <h3 style={{ marginBottom: '20px', color: '#4B5563' }}>Andamento Annuale dei Turni di Doppiaggio</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"turniDoppiaggio\" name=\"Turni di Doppiaggio\" stroke=\"#8884d8\" strokeWidth={2} />\n          <ReferenceLine y={averageTurni} stroke=\"red\" strokeDasharray=\"3 3\">\n            <Label value=\"Media Annuale\" position=\"insideTopLeft\" fill=\"red\" />\n          </ReferenceLine>\n        </LineChart>\n      </ResponsiveContainer>\n      <div style={{ textAlign: 'center', marginTop: '10px', fontSize: '14px', color: '#4B5563' }}>\n        Media Annuale: {averageTurni.toFixed(2)} turni\n      </div>\n    </div>\n  );\n};\n\nconst MonthlyListCard = ({ data, lastAvailableMonth }) => (\n  <div style={{\n    backgroundColor: 'white',\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '20px',\n    marginBottom: '20px',\n  }}\n  role=\"region\"\n  aria-label=\"Lista Mensile dei Turni di Doppiaggio\">\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>\n      <List size={24} color='#4B5563' aria-hidden=\"true\" />\n      <span style={{ marginLeft: '12px', fontSize: '18px', fontWeight: '500', color: '#4B5563' }}>Lista Mensile dei Turni di Doppiaggio</span>\n    </div>\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      {Object.entries(data)\n        .filter(([month]) => Number(month) <= lastAvailableMonth)\n        .map(([month, { totaleTurni }]) => (\n          <div key={month} style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px', borderBottom: '1px solid #E5E7EB', paddingBottom: '8px' }}>\n            <span style={{ color: '#4B5563' }}>{monthNames[parseInt(month)]}</span>\n            <span style={{ fontWeight: 'bold', color: '#1F2937' }}>{totaleTurni}</span>\n          </div>\n        ))}\n    </div>\n  </div>\n);\n\nconst LastYearView = ({ setView, year = new Date().getFullYear() }) => {\n  const yearlyData = getYearlyData(year);\n  const processedData = processYearlyData(yearlyData);\n\n  if (!processedData) {\n    return (\n      <div style={{\n        backgroundColor: '#F0F9FF',\n        minHeight: '100vh',\n        padding: '24px',\n        fontFamily: \"'Helvetica Neue', Arial, sans-serif\",\n      }}>\n        <div style={{ maxWidth: '800px', margin: '0 auto', textAlign: 'center' }}>\n          <h1>Dati non disponibili</h1>\n          <p>Ci scusiamo, ma i dati per l'anno {year} non sono disponibili al momento.</p>\n          <button \n            onClick={() => setView('main')} \n            style={{\n              background: '#4B5563',\n              color: 'white',\n              border: 'none',\n              borderRadius: '8px',\n              padding: '10px 20px',\n              cursor: 'pointer',\n              fontSize: '16px',\n              marginTop: '20px',\n            }}\n          >\n            Torna alla Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const totalComparisons = calculateComparisons(year, processedData, [year-1, year-2, year-3], 'total');\n  const avgComparisons = calculateComparisons(year, processedData, [year-1, year-2, year-3], 'average');\n\n  const stats = [\n    { \n      icon: <Calendar />, \n      label: 'Totale Turni di Doppiaggio Annuali', \n      value: processedData.totalTurni,\n      comparisons: totalComparisons,\n      backgroundColor: '#E6F3FF'\n    },\n    { \n      icon: <Activity />, \n      label: 'Media Turni di Doppiaggio Mensile', \n      value: processedData.avgTurni.toFixed(1),\n      comparisons: avgComparisons,\n      backgroundColor: '#FFF0E6'\n    },\n    { \n      icon: <TrendingUp />, \n      label: 'Mese con Più Turni di Doppiaggio', \n      value: `${processedData.monthWithMostTurni.value} (${monthNames[processedData.monthWithMostTurni.month - 1]})`,\n      backgroundColor: '#FFF0F0'\n    },\n    { \n      icon: <TrendingDown />, \n      label: 'Mese con Meno Turni di Doppiaggio', \n      value: `${processedData.monthWithLeastTurni.value} (${monthNames[processedData.monthWithLeastTurni.month - 1]})`,\n      backgroundColor: '#F0F0FF'\n    },\n  ];\n\n  return (\n    <div style={{\n      backgroundColor: '#F0F9FF',\n      minHeight: '100vh',\n      padding: '24px',\n      fontFamily: \"'Helvetica Neue', Arial, sans-serif\",\n    }}>\n      <div style={{ maxWidth: '800px', margin: '0 auto' }}>\n        <button \n          onClick={() => setView('main')} \n          style={{\n            background: '#4B5563',\n            color: 'white',\n            border: 'none',\n            borderRadius: '8px',\n            padding: '10px 20px',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            fontSize: '16px',\n            marginBottom: '24px',\n            transition: 'background-color 0.3s',\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#374151'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#4B5563'}\n        >\n          <ArrowLeft size={20} style={{ marginRight: '8px' }} />\n          Torna alla Dashboard\n        </button>\n        \n        <h1 style={{\n          fontSize: '32px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '8px',\n          color: '#1F2937',\n        }}>\n          Statistiche Anno\n        </h1>\n        <h2 style={{\n          fontSize: '28px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '32px',\n          color: '#4B5563',\n        }}>\n          {year}\n        </h2>\n        \n        <YearlyChart \n          data={processedData.data} \n          averageTurni={processedData.avgTurni} \n          lastAvailableMonth={processedData.lastAvailableMonth}\n        />\n        \n        <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>\n          {stats.map((stat, index) => (\n            <StatCard key={index} {...stat} />\n          ))}\n        </div>\n\n        <MonthlyListCard \n          data={processedData.data} \n          lastAvailableMonth={processedData.lastAvailableMonth}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default LastYearView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}