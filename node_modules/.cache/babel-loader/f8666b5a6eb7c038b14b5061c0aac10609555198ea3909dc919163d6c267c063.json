{"ast":null,"code":"// Strutture dati per i mesi\nconst monthsData = [\n// Dati 2022\n{\n  year: 2022,\n  month: 1,\n  // Gennaio\n  days: {\n    1: 0,\n    2: 0,\n    3: 10,\n    4: 15,\n    5: 12,\n    6: 0,\n    7: 4,\n    8: 0,\n    9: 0,\n    10: 21,\n    11: 16,\n    12: 21,\n    13: 18,\n    14: 17,\n    15: 2,\n    16: 0,\n    17: 19,\n    18: 16,\n    19: 21,\n    20: 20,\n    21: 19,\n    22: 0,\n    23: 0,\n    24: 11,\n    25: 19,\n    26: 17,\n    27: 14,\n    28: 17,\n    29: 0,\n    30: 0,\n    31: 20\n  }\n}, {\n  year: 2022,\n  month: 2,\n  // Febbraio\n  days: {\n    1: 16,\n    2: 20,\n    3: 17,\n    4: 17,\n    5: 0,\n    6: 0,\n    7: 13,\n    8: 20,\n    9: 15,\n    10: 15,\n    11: 14,\n    12: 0,\n    13: 0,\n    14: 19,\n    15: 21,\n    16: 20,\n    17: 17,\n    18: 19,\n    19: 0,\n    20: 0,\n    21: 22,\n    22: 19,\n    23: 20,\n    24: 18,\n    25: 13,\n    26: 0,\n    27: 0,\n    28: 17\n  }\n}, {\n  year: 2022,\n  month: 3,\n  // Marzo\n  days: {\n    1: 14,\n    2: 20,\n    3: 21,\n    4: 20,\n    5: 0,\n    6: 0,\n    7: 16,\n    8: 18,\n    9: 17,\n    10: 20,\n    11: 19,\n    12: 0,\n    13: 0,\n    14: 21,\n    15: 20,\n    16: 17,\n    17: 19,\n    18: 13,\n    19: 0,\n    20: 0,\n    21: 14,\n    22: 11,\n    23: 16,\n    24: 18,\n    25: 14,\n    26: 0,\n    27: 0,\n    28: 18,\n    29: 18,\n    30: 18,\n    31: 19\n  }\n}, {\n  year: 2022,\n  month: 4,\n  // Aprile\n  days: {\n    1: 16,\n    2: 0,\n    3: 0,\n    4: 16,\n    5: 17,\n    6: 19,\n    7: 19,\n    8: 12,\n    9: 0,\n    10: 0,\n    11: 15,\n    12: 19,\n    13: 21,\n    14: 20,\n    15: 11,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 20,\n    20: 19,\n    21: 17,\n    22: 15,\n    23: 1,\n    24: 0,\n    25: 0,\n    26: 17,\n    27: 16,\n    28: 15,\n    29: 18,\n    30: 0\n  }\n}, {\n  year: 2024,\n  month: 1,\n  // Gennaio\n  days: {\n    1: 0,\n    2: 0,\n    3: 3,\n    4: 1,\n    5: 3,\n    6: 0,\n    7: 0,\n    8: 10,\n    9: 6,\n    10: 10,\n    11: 8,\n    12: 9,\n    13: 0,\n    14: 0,\n    15: 10,\n    16: 12,\n    17: 10,\n    18: 9,\n    19: 9,\n    20: 0,\n    21: 0,\n    22: 11,\n    23: 12,\n    24: 10,\n    25: 11,\n    26: 9,\n    27: 0,\n    28: 0,\n    29: 8,\n    30: 9,\n    31: 9\n  }\n}, {\n  year: 2024,\n  month: 2,\n  // Febbraio\n  days: {\n    1: 9,\n    2: 6,\n    3: 0,\n    4: 0,\n    5: 9,\n    6: 11,\n    7: 11,\n    8: 11,\n    9: 11,\n    10: 0,\n    11: 0,\n    12: 11,\n    13: 11,\n    14: 12,\n    15: 16,\n    16: 10,\n    17: 0,\n    18: 0,\n    19: 11,\n    20: 14,\n    21: 8,\n    22: 11,\n    23: 11,\n    24: 0,\n    25: 0,\n    26: 3,\n    27: 17,\n    28: 12,\n    29: 17\n  }\n}, {\n  year: 2024,\n  month: 3,\n  // Marzo\n  days: {\n    1: 13,\n    2: 3,\n    3: 0,\n    4: 8,\n    5: 8,\n    6: 10,\n    7: 8,\n    8: 8,\n    9: 0,\n    10: 0,\n    11: 7,\n    12: 6,\n    13: 8,\n    14: 8,\n    15: 4,\n    16: 0,\n    17: 0,\n    18: 4,\n    19: 7,\n    20: 12,\n    21: 14,\n    22: 10,\n    23: 3,\n    24: 0,\n    25: 11,\n    26: 13,\n    27: 7,\n    28: 8,\n    29: 4,\n    30: 0,\n    31: 0\n  }\n}, {\n  year: 2024,\n  month: 4,\n  // Aprile\n  days: {\n    1: 0,\n    2: 9,\n    3: 10,\n    4: 18,\n    5: 19,\n    6: 3,\n    7: 0,\n    8: 21,\n    9: 25,\n    10: 23,\n    11: 25,\n    12: 19,\n    13: 3,\n    14: 0,\n    15: 22,\n    16: 22,\n    17: 23,\n    18: 26,\n    19: 19,\n    20: 2,\n    21: 0,\n    22: 17,\n    23: 23,\n    24: 20,\n    25: 0,\n    26: 12,\n    27: 3,\n    28: 0,\n    29: 13,\n    30: 15\n  }\n}, {\n  year: 2024,\n  month: 5,\n  // Maggio\n  days: {\n    1: 0,\n    2: 16,\n    3: 13,\n    4: 2,\n    5: 0,\n    6: 15,\n    7: 16,\n    8: 23,\n    9: 18,\n    10: 20,\n    11: 2,\n    12: 0,\n    13: 16,\n    14: 20,\n    15: 19,\n    16: 21,\n    17: 18,\n    18: 3,\n    19: 0,\n    20: 18,\n    21: 17,\n    22: 18,\n    23: 19,\n    24: 20,\n    25: 2,\n    26: 0,\n    27: 14,\n    28: 23,\n    29: 20,\n    30: 22,\n    31: 23\n  }\n}, {\n  year: 2024,\n  month: 6,\n  // Giugno\n  days: {\n    1: 2,\n    2: 0,\n    3: 24,\n    4: 25,\n    5: 19,\n    6: 27,\n    7: 23,\n    8: 2,\n    9: 0,\n    10: 18,\n    11: 17,\n    12: 18,\n    13: 18,\n    14: 19,\n    15: 3,\n    16: 0,\n    17: 15,\n    18: 18,\n    19: 17,\n    20: 16,\n    21: 20,\n    22: 2,\n    23: 0,\n    24: 22,\n    25: 20,\n    26: 21,\n    27: 19,\n    28: 18,\n    29: 0,\n    30: 0\n  }\n}, {\n  year: 2024,\n  month: 7,\n  // Luglio\n  days: {\n    1: 19,\n    2: 16,\n    3: 26,\n    4: 15,\n    5: 7,\n    6: 0,\n    7: 0,\n    8: 20,\n    9: 22,\n    10: 25,\n    11: 16,\n    12: 21,\n    13: 0,\n    14: 0,\n    15: 14,\n    16: 18,\n    17: 18,\n    18: 22,\n    19: 12,\n    20: 0,\n    21: 0,\n    22: 18,\n    23: 13,\n    24: 17,\n    25: 23,\n    26: 21,\n    27: 0,\n    28: 0,\n    29: 29,\n    30: 28,\n    31: 22\n  }\n}, {\n  year: 2024,\n  month: 8,\n  // Agosto\n  days: {\n    1: 19,\n    2: 11,\n    3: 0,\n    4: 0,\n    5: 10,\n    6: 5,\n    7: 5,\n    8: 6,\n    9: 2,\n    10: 0,\n    11: 0,\n    12: 0,\n    13: 0,\n    14: 0,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 0,\n    21: 0,\n    22: 0,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 7,\n    27: 7,\n    28: 8,\n    29: 12,\n    30: 8,\n    31: 0\n  }\n}];\n\n// Funzioni di utilità\n\nconst calculateTotalShifts = data => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\nconst getWorkdaysInMonth = (year, month) => {\n  const date = new Date(year, month - 1, 1);\n  let workdays = 0;\n  while (date.getMonth() === month - 1) {\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) workdays++;\n    date.setDate(date.getDate() + 1);\n  }\n  return workdays;\n};\nconst calculateAverageWorkdayShifts = data => {\n  const total = calculateTotalShifts(data);\n  const workdays = getWorkdaysInMonth(data.year, data.month);\n  return total / workdays;\n};\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst findMaxShiftsDay = data => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? {\n      day: parseInt(day),\n      shifts\n    } : max;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\nconst findMinShiftsDay = data => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return shifts < min.shifts || min.shifts === 0 ? {\n      day: parseInt(day),\n      shifts\n    } : min;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzioni principali\n\nexport const getMonthData = yearMonth => {\n  const [year, month] = yearMonth.split('-').map(Number);\n  const monthData = monthsData.find(m => m.year === year && m.month === month);\n  if (monthData) {\n    return {\n      totaleTurni: calculateTotalShifts(monthData),\n      mediaGiornaliera: calculateAverageWorkdayShifts(monthData),\n      massimoTurni: findMaxShiftsDay(monthData),\n      minimoTurni: findMinShiftsDay(monthData)\n    };\n  }\n  return null;\n};\nexport const getAvailableMonths = () => {\n  return monthsData.map(m => ({\n    value: `${m.year}-${m.month.toString().padStart(2, '0')}`,\n    label: `${getMonthName(m.month)} ${m.year}`,\n    sortValue: m.year * 12 + m.month\n  })).sort((a, b) => b.sortValue - a.sortValue).map(({\n    value,\n    label\n  }) => ({\n    value,\n    label\n  }));\n};\nexport const getLatestMonthData = () => {\n  const lastMonth = monthsData[monthsData.length - 1];\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageWorkdayShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\nexport const getPreviousMonthData = () => {\n  if (monthsData.length > 1) {\n    const previousMonth = monthsData[monthsData.length - 2];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageWorkdayShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: {\n      day: 15,\n      shifts: 20\n    },\n    minimoTurni: {\n      day: 30,\n      shifts: 1\n    }\n  };\n};\nexport const getAnnualAverageData = () => {\n  const totalTurni = monthsData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / monthsData.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\nexport const getYearData = year => {\n  const yearData = monthsData.filter(m => m.year.toString() === year);\n  if (yearData.length > 0) {\n    const totaleTurni = yearData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n    return {\n      totaleTurni,\n      mediaMensile: totaleTurni / yearData.length\n    };\n  }\n  return null;\n};\nexport const getAvailableYears = () => {\n  const years = [...new Set(monthsData.map(m => m.year))];\n  return years.map(year => ({\n    value: year.toString(),\n    label: year.toString()\n  })).sort((a, b) => b.value - a.value);\n};\nexport const getYearlyData = year => {\n  const yearData = {};\n  monthsData.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = {\n        totaleTurni: calculateTotalShifts(month)\n      };\n    }\n  });\n  if (Object.keys(yearData).length === 0) {\n    for (let i = 0; i < 12; i++) {\n      yearData[i] = {\n        totaleTurni: 0\n      };\n    }\n  }\n  return yearData;\n};","map":{"version":3,"names":["monthsData","year","month","days","calculateTotalShifts","data","Object","values","reduce","total","shifts","getWorkdaysInMonth","date","Date","workdays","getMonth","dayOfWeek","getDay","setDate","getDate","calculateAverageWorkdayShifts","getMonthName","monthNumber","monthNames","findMaxShiftsDay","entries","max","day","parseInt","findMinShiftsDay","min","getMonthData","yearMonth","split","map","Number","monthData","find","m","totaleTurni","mediaGiornaliera","massimoTurni","minimoTurni","getAvailableMonths","value","toString","padStart","label","sortValue","sort","a","b","getLatestMonthData","lastMonth","length","getPreviousMonthData","previousMonth","getAnnualAverageData","totalTurni","averageTurni","mediaAnnuale","getYearData","yearData","filter","mediaMensile","getAvailableYears","years","Set","getYearlyData","forEach","keys","i"],"sources":["/Users/marcoaugustocomba/Desktop/Studio Stats/dashboard-pumaisdue/src/data.js"],"sourcesContent":["// Strutture dati per i mesi\nconst monthsData = [\n  \n  // Dati 2022\n  {\n    year: 2022,\n    month: 1, // Gennaio\n    days: {\n      1: 0, 2: 0, 3: 10, 4: 15, 5: 12, 6: 0, 7: 4, 8: 0,\n      9: 0, 10: 21, 11: 16, 12: 21, 13: 18, 14: 17, 15: 2,\n      16: 0, 17: 19, 18: 16, 19: 21, 20: 20, 21: 19, 22: 0,\n      23: 0, 24: 11, 25: 19, 26: 17, 27: 14, 28: 17, 29: 0,\n      30: 0, 31: 20\n    }\n  },\n  {\n    year: 2022,\n    month: 2, // Febbraio\n    days: {\n      1: 16, 2: 20, 3: 17, 4: 17, 5: 0, 6: 0, 7: 13, 8: 20,\n      9: 15, 10: 15, 11: 14, 12: 0, 13: 0, 14: 19, 15: 21,\n      16: 20, 17: 17, 18: 19, 19: 0, 20: 0, 21: 22, 22: 19,\n      23: 20, 24: 18, 25: 13, 26: 0, 27: 0, 28: 17\n    }\n  },\n  {\n    year: 2022,\n    month: 3, // Marzo\n    days: {\n      1: 14, 2: 20, 3: 21, 4: 20, 5: 0, 6: 0, 7: 16, 8: 18,\n      9: 17, 10: 20, 11: 19, 12: 0, 13: 0, 14: 21, 15: 20,\n      16: 17, 17: 19, 18: 13, 19: 0, 20: 0, 21: 14, 22: 11,\n      23: 16, 24: 18, 25: 14, 26: 0, 27: 0, 28: 18, 29: 18,\n      30: 18, 31: 19\n    }\n  },\n  {\n    year: 2022,\n    month: 4, // Aprile\n    days: {\n      1: 16, 2: 0, 3: 0, 4: 16, 5: 17, 6: 19, 7: 19, 8: 12,\n      9: 0, 10: 0, 11: 15, 12: 19, 13: 21, 14: 20, 15: 11,\n      16: 0, 17: 0, 18: 0, 19: 20, 20: 19, 21: 17, 22: 15,\n      23: 1, 24: 0, 25: 0, 26: 17, 27: 16, 28: 15, 29: 18,\n      30: 0\n    }\n  },\n  {\n    year: 2024,\n    month: 1, // Gennaio\n    days: {\n      1: 0, 2: 0, 3: 3, 4: 1, 5: 3, 6: 0, 7: 0,\n      8: 10, 9: 6, 10: 10, 11: 8, 12: 9, 13: 0, 14: 0,\n      15: 10, 16: 12, 17: 10, 18: 9, 19: 9, 20: 0, 21: 0,\n      22: 11, 23: 12, 24: 10, 25: 11, 26: 9, 27: 0, 28: 0,\n      29: 8, 30: 9, 31: 9\n    }\n  },\n  {\n    year: 2024,\n    month: 2, // Febbraio\n    days: {\n      1: 9, 2: 6, 3: 0, 4: 0, 5: 9, 6: 11, 7: 11,\n      8: 11, 9: 11, 10: 0, 11: 0, 12: 11, 13: 11, 14: 12,\n      15: 16, 16: 10, 17: 0, 18: 0, 19: 11, 20: 14, 21: 8,\n      22: 11, 23: 11, 24: 0, 25: 0, 26: 3, 27: 17, 28: 12,\n      29: 17\n    }\n  },\n  {\n    year: 2024,\n    month: 3, // Marzo\n    days: {\n      1: 13, 2: 3, 3: 0, 4: 8, 5: 8, 6: 10, 7: 8,\n      8: 8, 9: 0, 10: 0, 11: 7, 12: 6, 13: 8, 14: 8,\n      15: 4, 16: 0, 17: 0, 18: 4, 19: 7, 20: 12, 21: 14,\n      22: 10, 23: 3, 24: 0, 25: 11, 26: 13, 27: 7, 28: 8,\n      29: 4, 30: 0, 31: 0\n    }\n  },\n  {\n    year: 2024,\n    month: 4, // Aprile\n    days: {\n      1: 0, 2: 9, 3: 10, 4: 18, 5: 19, 6: 3, 7: 0,\n      8: 21, 9: 25, 10: 23, 11: 25, 12: 19, 13: 3, 14: 0,\n      15: 22, 16: 22, 17: 23, 18: 26, 19: 19, 20: 2, 21: 0,\n      22: 17, 23: 23, 24: 20, 25: 0, 26: 12, 27: 3, 28: 0,\n      29: 13, 30: 15\n    }\n  },\n  {\n    year: 2024,\n    month: 5, // Maggio\n    days: {\n      1: 0, 2: 16, 3: 13, 4: 2, 5: 0, 6: 15, 7: 16,\n      8: 23, 9: 18, 10: 20, 11: 2, 12: 0, 13: 16, 14: 20,\n      15: 19, 16: 21, 17: 18, 18: 3, 19: 0, 20: 18, 21: 17,\n      22: 18, 23: 19, 24: 20, 25: 2, 26: 0, 27: 14, 28: 23,\n      29: 20, 30: 22, 31: 23\n    }\n  },\n  {\n    year: 2024,\n    month: 6, // Giugno\n    days: {\n      1: 2, 2: 0, 3: 24, 4: 25, 5: 19, 6: 27, 7: 23, 8: 2,\n      9: 0, 10: 18, 11: 17, 12: 18, 13: 18, 14: 19, 15: 3,\n      16: 0, 17: 15, 18: 18, 19: 17, 20: 16, 21: 20, 22: 2,\n      23: 0, 24: 22, 25: 20, 26: 21, 27: 19, 28: 18, 29: 0,\n      30: 0\n    }\n  },\n  {\n    year: 2024,\n    month: 7, // Luglio\n    days: {\n      1: 19, 2: 16, 3: 26, 4: 15, 5: 7, 6: 0, 7: 0,\n      8: 20, 9: 22, 10: 25, 11: 16, 12: 21, 13: 0, 14: 0,\n      15: 14, 16: 18, 17: 18, 18: 22, 19: 12, 20: 0, 21: 0,\n      22: 18, 23: 13, 24: 17, 25: 23, 26: 21, 27: 0, 28: 0,\n      29: 29, 30: 28, 31: 22\n    }\n  },\n  {\n    year: 2024,\n    month: 8, // Agosto\n    days: {\n      1: 19, 2: 11, 3: 0, 4: 0, 5: 10, 6: 5, 7: 5,\n      8: 6, 9: 2, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0,\n      15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 0, 21: 0,\n      22: 0, 23: 0, 24: 0, 25: 0, 26: 7, 27: 7, 28: 8,\n      29: 12, 30: 8, 31: 0\n    }\n  }\n];\n\n// Funzioni di utilità\n\nconst calculateTotalShifts = (data) => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\nconst getWorkdaysInMonth = (year, month) => {\n  const date = new Date(year, month - 1, 1);\n  let workdays = 0;\n  while (date.getMonth() === month - 1) {\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) workdays++;\n    date.setDate(date.getDate() + 1);\n  }\n  return workdays;\n};\n\nconst calculateAverageWorkdayShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const workdays = getWorkdaysInMonth(data.year, data.month);\n  return total / workdays;\n};\n\nconst getMonthName = (monthNumber) => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n                      'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\n\nconst findMaxShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? { day: parseInt(day), shifts } : max;\n  }, { day: 0, shifts: 0 });\n};\n\nconst findMinShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return (shifts < min.shifts || min.shifts === 0) ? { day: parseInt(day), shifts } : min;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzioni principali\n\nexport const getMonthData = (yearMonth) => {\n  const [year, month] = yearMonth.split('-').map(Number);\n  const monthData = monthsData.find(m => m.year === year && m.month === month);\n  \n  if (monthData) {\n    return {\n      totaleTurni: calculateTotalShifts(monthData),\n      mediaGiornaliera: calculateAverageWorkdayShifts(monthData),\n      massimoTurni: findMaxShiftsDay(monthData),\n      minimoTurni: findMinShiftsDay(monthData)\n    };\n  }\n  \n  return null;\n};\n\nexport const getAvailableMonths = () => {\n  return monthsData\n    .map(m => ({\n      value: `${m.year}-${m.month.toString().padStart(2, '0')}`,\n      label: `${getMonthName(m.month)} ${m.year}`,\n      sortValue: m.year * 12 + m.month\n    }))\n    .sort((a, b) => b.sortValue - a.sortValue)\n    .map(({ value, label }) => ({ value, label }));\n};\n\nexport const getLatestMonthData = () => {\n  const lastMonth = monthsData[monthsData.length - 1];\n  return {\n    totaleTurni: calculateTotalShifts(lastMonth),\n    mediaGiornaliera: calculateAverageWorkdayShifts(lastMonth),\n    massimoTurni: findMaxShiftsDay(lastMonth),\n    minimoTurni: findMinShiftsDay(lastMonth)\n  };\n};\n\nexport const getPreviousMonthData = () => {\n  if (monthsData.length > 1) {\n    const previousMonth = monthsData[monthsData.length - 2];\n    return {\n      totaleTurni: calculateTotalShifts(previousMonth),\n      mediaGiornaliera: calculateAverageWorkdayShifts(previousMonth),\n      massimoTurni: findMaxShiftsDay(previousMonth),\n      minimoTurni: findMinShiftsDay(previousMonth)\n    };\n  }\n  // Se non c'è un mese precedente disponibile, restituisci dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: { day: 15, shifts: 20 },\n    minimoTurni: { day: 30, shifts: 1 }\n  };\n};\n\nexport const getAnnualAverageData = () => {\n  const totalTurni = monthsData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n  const averageTurni = totalTurni / monthsData.length;\n  return {\n    mediaAnnuale: averageTurni\n  };\n};\n\nexport const getYearData = (year) => {\n  const yearData = monthsData.filter(m => m.year.toString() === year);\n  if (yearData.length > 0) {\n    const totaleTurni = yearData.reduce((total, month) => total + calculateTotalShifts(month), 0);\n    return {\n      totaleTurni,\n      mediaMensile: totaleTurni / yearData.length\n    };\n  }\n  return null;\n};\n\nexport const getAvailableYears = () => {\n  const years = [...new Set(monthsData.map(m => m.year))];\n  return years\n    .map(year => ({\n      value: year.toString(),\n      label: year.toString()\n    }))\n    .sort((a, b) => b.value - a.value);\n};\n\nexport const getYearlyData = (year) => {\n  const yearData = {};\n  monthsData.forEach(month => {\n    if (month.year === year) {\n      yearData[month.month - 1] = { totaleTurni: calculateTotalShifts(month) };\n    }\n  });\n\n  if (Object.keys(yearData).length === 0) {\n    for (let i = 0; i < 12; i++) {\n      yearData[i] = { totaleTurni: 0 };\n    }\n  }\n\n  return yearData;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}