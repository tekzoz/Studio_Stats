{"ast":null,"code":"// Struttura dati per un mese\nconst monthData = {\n  year: 2024,\n  month: 8,\n  // Agosto\n  days: {\n    1: 19,\n    2: 11,\n    3: 0,\n    4: 0,\n    5: 10,\n    6: 5,\n    7: 5,\n    8: 6,\n    9: 2,\n    10: 0,\n    11: 0,\n    12: 0,\n    13: 0,\n    14: 0,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 0,\n    21: 0,\n    22: 0,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 7,\n    27: 7,\n    28: 8,\n    29: 12,\n    30: 8,\n    31: 0\n  }\n};\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = data => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = data => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = data => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? {\n      day: parseInt(day),\n      shifts\n    } : max;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = data => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return shifts < min.shifts || min.shifts === 0 ? {\n      day: parseInt(day),\n      shifts\n    } : min;\n  }, {\n    day: 0,\n    shifts: 0\n  });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  // Qui dovresti implementare la logica per ottenere i dati dell'ultimo mese\n  // Per ora, restituiamo i dati di esempio\n  return {\n    totaleTurni: calculateTotalShifts(monthData),\n    mediaGiornaliera: calculateAverageShifts(monthData),\n    massimoTurni: findMaxShiftsDay(monthData),\n    minimoTurni: findMinShiftsDay(monthData)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  // Qui dovresti implementare la logica per ottenere i dati del mese precedente\n  // Per ora, restituiamo dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: {\n      day: 15,\n      shifts: 20\n    },\n    minimoTurni: {\n      day: 30,\n      shifts: 1\n    }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  // Qui dovresti implementare la logica per calcolare la media annuale\n  // Per ora, restituiamo un valore fittizio\n  return {\n    mediaAnnuale: 300\n  };\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = year => {\n  // Qui dovresti implementare la logica per ottenere i dati di un intero anno\n  // Per ora, restituiamo dati fittizi\n  return {\n    0: {\n      totaleTurni: 310\n    },\n    1: {\n      totaleTurni: 280\n    },\n    // ... altri mesi ...\n    11: {\n      totaleTurni: 320\n    }\n  };\n};","map":{"version":3,"names":["monthData","year","month","days","calculateTotalShifts","data","Object","values","reduce","total","shifts","calculateAverageShifts","daysInMonth","keys","length","findMaxShiftsDay","entries","max","day","parseInt","findMinShiftsDay","min","getLatestMonthData","totaleTurni","mediaGiornaliera","massimoTurni","minimoTurni","getPreviousMonthData","getAnnualAverageData","mediaAnnuale","getYearlyData"],"sources":["/Users/marcoaugustocomba/Desktop/Studio Stats/dashboard-pumaisdue/src/data.js"],"sourcesContent":["// Struttura dati per un mese\nconst monthData = {\n  year: 2024,\n  month: 8, // Agosto\n  days: {\n    1: 19,\n    2: 11,\n    3: 0,\n    4: 0,\n    5: 10,\n    6: 5,\n    7: 5,\n    8: 6,\n    9: 2,\n    10: 0,\n    11: 0,\n    12: 0,\n    13: 0,\n    14: 0,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 0,\n    21: 0,\n    22: 0,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 7,\n    27: 7,\n    28: 8,\n    29: 12,\n    30: 8,\n    31: 0\n  }\n};\n\n// Funzione per calcolare il totale dei turni del mese\nconst calculateTotalShifts = (data) => {\n  return Object.values(data.days).reduce((total, shifts) => total + shifts, 0);\n};\n\n// Funzione per calcolare la media giornaliera dei turni\nconst calculateAverageShifts = (data) => {\n  const total = calculateTotalShifts(data);\n  const daysInMonth = Object.keys(data.days).length;\n  return total / daysInMonth;\n};\n\n// Funzione per trovare il giorno con il massimo numero di turni\nconst findMaxShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((max, [day, shifts]) => {\n    return shifts > max.shifts ? { day: parseInt(day), shifts } : max;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per trovare il giorno con il minimo numero di turni (escludendo i giorni con 0 turni)\nconst findMinShiftsDay = (data) => {\n  return Object.entries(data.days).reduce((min, [day, shifts]) => {\n    if (shifts === 0) return min;\n    return (shifts < min.shifts || min.shifts === 0) ? { day: parseInt(day), shifts } : min;\n  }, { day: 0, shifts: 0 });\n};\n\n// Funzione per ottenere i dati dell'ultimo mese\nexport const getLatestMonthData = () => {\n  // Qui dovresti implementare la logica per ottenere i dati dell'ultimo mese\n  // Per ora, restituiamo i dati di esempio\n  return {\n    totaleTurni: calculateTotalShifts(monthData),\n    mediaGiornaliera: calculateAverageShifts(monthData),\n    massimoTurni: findMaxShiftsDay(monthData),\n    minimoTurni: findMinShiftsDay(monthData)\n  };\n};\n\n// Funzione per ottenere i dati del mese precedente\nexport const getPreviousMonthData = () => {\n  // Qui dovresti implementare la logica per ottenere i dati del mese precedente\n  // Per ora, restituiamo dati fittizi\n  return {\n    totaleTurni: 280,\n    mediaGiornaliera: 9.3,\n    massimoTurni: { day: 15, shifts: 20 },\n    minimoTurni: { day: 30, shifts: 1 }\n  };\n};\n\n// Funzione per ottenere la media annuale\nexport const getAnnualAverageData = () => {\n  // Qui dovresti implementare la logica per calcolare la media annuale\n  // Per ora, restituiamo un valore fittizio\n  return {\n    mediaAnnuale: 300\n  };\n};\n\n// Funzione per ottenere i dati annuali\nexport const getYearlyData = (year) => {\n  // Qui dovresti implementare la logica per ottenere i dati di un intero anno\n  // Per ora, restituiamo dati fittizi\n  return {\n    0: { totaleTurni: 310 },\n    1: { totaleTurni: 280 },\n    // ... altri mesi ...\n    11: { totaleTurni: 320 }\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}